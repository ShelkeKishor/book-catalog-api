name: API Testing with Keploy

on:
  workflow_dispatch:  # Manual trigger
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/keploy.yml'
    branches: [ main, master ]
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/keploy.yml'
    branches: [ main, master ]

jobs:
  api-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g jest supertest

    - name: Setup Test Environment
      run: |
        echo "Setting up test database..."
        echo '{"users":[],"books":[]}' > db.json
        chmod 666 db.json
        echo "Test database created successfully"

    - name: Run Tests
      env:
        NODE_ENV: test
        PORT: ${{ secrets.PORT }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Running tests..."
        npm test 2>&1 | tee test.log
        echo "Tests completed"

    - name: Install Keploy
      run: |
        echo "Installing Keploy..."
        curl -O https://raw.githubusercontent.com/keploy/keploy/main/keploy.sh
        chmod +x keploy.sh
        sudo ./keploy.sh
        echo "Keploy installation completed"

    - name: Run API Tests
      env:
        NODE_ENV: test
        PORT: ${{ secrets.PORT }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Starting API server for testing..."
        node index.js > server.log 2>&1 &
        SERVER_PID=$!

        echo "Waiting for server to be ready..."
        MAX_RETRIES=30
        RETRY_COUNT=0
        until curl -s http://localhost:${{ secrets.PORT }}/ > /dev/null; do
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Server failed to start. Server logs:"
            cat server.log
            exit 1
          fi
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Attempt $RETRY_COUNT/$MAX_RETRIES - Waiting for server..."
          sleep 2
        done
        echo "Server is ready!"

        echo "Running API integration tests with correct field names..."
        
        # Test registration with correct fields
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"password123"}')
        
        echo "Registration response: $REGISTER_RESPONSE"
        
        # Test login with correct fields
        LOGIN_RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"password123"}')
        
        echo "Login response: $LOGIN_RESPONSE"

        echo "Running Keploy tests..."
        timeout 30s keploy test -c "NODE_ENV=test node index.js" --delay 5 || true

        echo "Cleaning up..."
        kill $SERVER_PID || true

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-test-results
        path: |
          backend/coverage/
          backend/test.log
          backend/server.log
          backend/keploy-test-results/

    - name: Check Test Results
      if: always()
      run: |
        echo "Checking test results..."
        
        # Check Jest test results
        if [ -f "test.log" ]; then
          if grep -i "failed" test.log; then
            echo "Found test failures in Jest tests"
            cat test.log
            exit 1
          fi
        else
          echo "Jest test log not found"
          exit 1
        fi

        # Check server logs
        if [ -f "server.log" ]; then
          if grep -i "error" server.log; then
            echo "Found errors in server logs:"
            cat server.log
            exit 1
          fi
        else
          echo "Server log file not found"
          exit 1
        fi

    - name: Run ESLint
      run: |
        echo "Running ESLint..."
        npx eslint .

    - name: Upload ESLint Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: eslint-results
        path: eslint-results.json 