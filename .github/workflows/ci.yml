name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        npm install -g eslint
        echo "Dependencies installed successfully"

    - name: Run Linting
      run: |
        echo "Running linting..."
        eslint . --ext .js || {
          echo "Linting failed. Please fix the issues above."
          exit 1
        }

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        echo "Dependencies installed successfully"

    - name: Setup Test Environment
      run: |
        echo "Setting up test environment..."
        echo '{"books":[],"users":[]}' > db.json
        chmod 666 db.json
        echo "Test environment setup completed"

    - name: Run Unit and Integration Tests
      env:
        NODE_ENV: test
        PORT: ${{ secrets.PORT }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Running tests..."
        npm test -- --detectOpenHandles --forceExit --coverage --ci --runInBand 2>&1 | tee test.log
        echo "Tests completed"

    - name: Run API Integration Tests
      env:
        NODE_ENV: test
        PORT: ${{ secrets.PORT }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Starting server for API tests..."
        node index.js > server.log 2>&1 &
        SERVER_PID=$!

        echo "Waiting for server to be ready..."
        MAX_RETRIES=30
        RETRY_COUNT=0
        until curl -s http://localhost:${{ secrets.PORT }}/api/books > /dev/null; do
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Server failed to start. Server logs:"
            cat server.log
            exit 1
          fi
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Attempt $RETRY_COUNT/$MAX_RETRIES - Waiting for server..."
          sleep 2
        done
        echo "Server is ready!"

        echo "Running API tests..."
        # Create a test user
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"name":"Test User","email":"test@example.com","password":"testpass123"}')
        
        echo "Registration response: $REGISTER_RESPONSE"
        
        # Login and get token
        LOGIN_RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"testpass123"}')
        
        echo "Login response: $LOGIN_RESPONSE"
        
        TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.token')
        if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
          echo "Failed to get auth token"
          exit 1
        fi

        # Test book creation
        BOOK_RESPONSE=$(curl -s -X POST http://localhost:${{ secrets.PORT }}/api/books \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d '{"title":"Test Book","author":"Test Author","published_year":2024}')
        
        echo "Book creation response: $BOOK_RESPONSE"
        
        BOOK_ID=$(echo $BOOK_RESPONSE | jq -r '.id')
        if [ "$BOOK_ID" == "null" ] || [ -z "$BOOK_ID" ]; then
          echo "Failed to create book"
          exit 1
        fi

        # Test book retrieval
        BOOKS_RESPONSE=$(curl -s -X GET http://localhost:${{ secrets.PORT }}/api/books \
          -H "Authorization: Bearer $TOKEN")
        
        echo "Books retrieval response: $BOOKS_RESPONSE"
        
        BOOKS_COUNT=$(echo $BOOKS_RESPONSE | jq '. | length')
        if [ "$BOOKS_COUNT" -ne 1 ]; then
          echo "Expected 1 book, got $BOOKS_COUNT"
          exit 1
        fi

        echo "Cleaning up..."
        kill $SERVER_PID || true

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          backend/coverage/
          backend/test.log
          backend/server.log

    - name: Check Test Results
      if: always()
      run: |
        echo "Checking test results..."
        
        # Check Jest test results
        if [ -f "test.log" ]; then
          if grep -i "failed" test.log; then
            echo "Found test failures in Jest tests"
            cat test.log
            exit 1
          fi
        else
          echo "Jest test log not found"
          exit 1
        fi

        # Check server logs
        if [ -f "server.log" ]; then
          if grep -i "error" server.log; then
            echo "Found errors in server logs:"
            cat server.log
            exit 1
          fi
        else
          echo "Server log file not found"
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Dependencies
      run: |
        npm ci --production
        echo "Dependencies installed successfully"

    - name: Create Production Build
      run: |
        echo "Creating production build..."
        # Add any build steps here if needed
        echo "Build completed successfully"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: backend/
        retention-days: 5 